// <copyright file="CuePoint.cs" company="QutEcoacoustics">
// All code in this file and all associated files are the copyright and property of the QUT Ecoacoustics Research Group.
// </copyright>

namespace Emu.Audio.WAVE
{
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Sequential, Size = 24)]
    public readonly record struct CuePoint
    {
        /// <summary>
        /// Gets the unique identification value.
        /// Each cue point has a unique identification value used to associate
        /// cue points with information in other chunks. For example, a Label
        /// chunk contains text that describes a point in the wave file by
        /// referencing the associated cue point.
        /// </summary>
        public uint ID { get; init; }

        /// <summary>
        /// Gets the play order position.
        /// The position specifies the sample offset associated with the cue point in terms of
        /// the sample's position in the final stream of samples generated by the play list.
        /// Said in another way, if a play list chunk is specified, the position value is
        /// equal to the sample number at which this cue point will occur during playback
        /// of the entire play list as defined by the play list's order. If no play list
        /// chunk is specified this value should be 0.
        /// </summary>
        public uint Position { get; init; }

        /// <summary>
        /// Gets the data chunk ID.
        /// This value specifies the four byte ID used by the chunk containing the sample
        /// that corresponds to this cue point. A Wave file with no play list is always
        /// "data". A Wave file with a play list containing both sample data and silence
        /// may be either "data" or "slnt".
        /// </summary>
        public uint DataChunkId { get; init; }

        /// <summary>
        /// Gets the chunk start.
        /// The Chunk Start value specifies the byte offset into the Wave List Chunk of the
        /// chunk containing the sample that corresponds to this cue point. This is the same
        /// chunk described by the Data Chunk ID value. If no Wave List Chunk exists in the
        /// Wave file, this value is 0. If a Wave List Chunk exists, this is the offset into
        /// the "wavl" chunk. The first chunk in the Wave List Chunk would be specified with
        /// a value of 0.
        /// </summary>
        public uint ChunkStart { get; init; }

        /// <summary>
        /// Gets the block start.
        /// The Block Start value specifies the byte offset into the "data" or "slnt"
        /// Chunk to the start of the block containing the sample. The start of a block
        /// is defined as the first byte in uncompressed PCM wave data or the last byte
        /// in compressed wave data where decompression can begin to find the value of
        /// the corresponding sample value.
        /// </summary>
        public uint BlockStart { get; init; }

        /// <summary>
        /// Gets the sample offset.
        /// The Sample Offset specifies an offset into the block (specified by Block Start)
        /// for the sample that corresponds to the cue point. In uncompressed PCM waveform data,
        /// this is simply the byte offset into the "data" chunk. In compressed waveform data,
        /// this value is equal to the number of samples (may or may not be bytes) from the
        /// Block Start to the sample that corresponds to the cue point.
        /// </summary>
        public uint SampleOffset { get; init; }
    }
}
